AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation template to set up a VPC, Auto-scaling Group with Windows EC2 instances, Security Group, S3 Bucket, IAM Role, and required outputs.

Resources:
  # VPC
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: Skillsync-Windows-VPC

  # Internet Gateway
  IGW:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: Skillsync-Windows-IGW

  # Attach Internet Gateway to VPC
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref IGW

  # Public Subnet 1
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.1.0/24'
      AvailabilityZone: !Select [0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Skillsync-PublicSubnet1

  # Public Subnet 2
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.2.0/24'
      AvailabilityZone: !Select [1, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Skillsync-PublicSubnet2

  # Public Route Table
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Skillsync-PublicRouteTable

  # Public Route
  PublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref IGW

  # Public Subnet 1 Association
  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  # Public Subnet 2 Association
  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # Security Group for RDP Access
  SG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Allows RDP access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: Skillsync-Windows-SG

  # IAM Role for S3 Access
  InstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:ListBucket'
                  - 's3:GetObject'
                  - 's3:PutObject'
                Resource:
                  - !Sub 'arn:aws:s3:::skillsync-project-storage'
                  - !Sub 'arn:aws:s3:::skillsync-project-storage/*'

  # Instance Profile for EC2 Instances
  InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref InstanceRole

  # S3 Bucket
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: skillsync-project-storage

  # Launch Template for Windows Instances
  LaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateName: Skillsync-Windows-LaunchTemplate
      LaunchTemplateData:
        ImageId: ami-07d9456e59793a7d5 # Windows Server 2019 Base AMI (example)
        InstanceType: t2.micro
        SecurityGroupIds:
          - !Ref SG
        KeyName: skillstest
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        UserData:
          Fn::Base64: |
            <powershell>
            # Install AWS CLI
            Invoke-WebRequest "https://awscli.amazonaws.com/AWSCLIV2.msi" -OutFile "AWSCLIV2.msi"
            Start-Process msiexec.exe -ArgumentList '/i AWSCLIV2.msi /quiet' -Wait

            # Download a file from the S3 bucket
            aws s3 cp s3://skillsync-project-storage/sample-file.txt C:\sample-file.txt

            # Optionally, upload a file to the S3 bucket
            echo "Instance setup complete" > C:\setup-log.txt
            aws s3 cp C:\setup-log.txt s3://skillsync-project-storage/setup-log.txt
            </powershell>

  # Auto-scaling Group
  AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: '1'
      MinSize: 1
      MaxSize: 3
      DesiredCapacity: 2
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: Skillsync-Windows-ASG
          PropagateAtLaunch: true

Outputs:
  AutoScalingGroupName:
    Description: 'The name of the Auto Scaling Group'
    Value: !Ref AutoScalingGroup

  LaunchTemplateId:
    Description: 'The ID of the Launch Template'
    Value: !Ref LaunchTemplate

  S3BucketName:
    Description: 'The name of the S3 bucket'
    Value: !Ref S3Bucket
